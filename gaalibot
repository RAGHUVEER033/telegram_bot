from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = "Enter Bot API key :"
BOT_USERNAME: Final = '@bhosdike1_bot' #bot_name @bhosdike1_bot example
#command
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello! Bhosdike Thanks for chatting with me! I am your loda")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello! lode! Which Types of Gaali you want")

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello! This is a custom Gaali command!")

#Handle Respnses
def handle_response(text: str) -> str:
    processed: str = text.lower()

    if "lodu" in processed:
        return 'Tu saale ekdam lodu hain!'
    if "chodu" in processed:
        return "Dhatt teri maa ki chout"
    if "gandu" in processed:
        return "Tumse Na Ho Payega Bhenchod"
    return "I don't understand what you say - But ak baat hain 'bhaag yahaan se...'"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, "").strip()
            tesponse: str = handle_response(new_text)
        else:
            return
    else:
        response: str = handle_response(text)

    print('Bot:', response)
    await update.message.reply_text(response)

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')

if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('start', help_command))
    app.add_handler(CommandHandler('start', custom_command))

    #Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Errors
    app.add_error_handler(error)

    #Polls the bot
    print('Polling...')
    app.run_polling(poll_interval=3)



